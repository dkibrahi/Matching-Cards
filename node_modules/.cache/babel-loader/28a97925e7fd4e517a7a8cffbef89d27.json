{"ast":null,"code":"var _jsxFileName = \"/Users/SuperGaming/Downloads/react-sept/matching-cards/src/App.jsx\",\n    _s = $RefreshSig$();\n\n// other\nimport { useState, useEffect } from 'react';\nimport { cardImages } from './external/CardImages';\nimport useSound from 'use-sound'; // sounds\n\nimport buttonClickSound from './resources/buttonClick.mp3'; // components\n\nimport Card from './components/Card'; // styles \n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [numTurns, setNumTurns] = useState(0); // display number of turns\n\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false); // prevent user from clicking too many cards\n\n  const [playBtnClickedSound] = useSound(buttonClickSound);\n  useEffect(() => {\n    shuffleCards(); // on page load\n  }, []);\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      compareCards();\n    }\n  }, [choiceOne, choiceTwo]);\n\n  const handleChoice = card => {\n    if (choiceOne === null) {\n      setChoiceOne(card);\n    } else {\n      setChoiceTwo(card);\n    }\n  };\n\n  const compareCards = () => {\n    setDisabled(true); // disable any other cards from being clicked\n    // same card\n\n    if (choiceOne.src === choiceTwo.src) {\n      setCards(prevCards => {\n        return prevCards.map(card => {\n          // update property of newly matched card\n          if (card.src === choiceOne.src) {\n            return { ...card,\n              matched: true\n            };\n          } else {\n            return card;\n          }\n        });\n      });\n      resetTurn();\n    } // cards aren't the same\n    else {\n      setTimeout(() => resetTurn(), 1000);\n    }\n  };\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setNumTurns(numTurns + 1);\n    setDisabled(false);\n  };\n\n  const shuffleCards = () => {\n    playBtnClickedSound();\n    const shuffledCards = [...cardImages, ...cardImages] // two copies of each card\n    .sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    })); // reset cards and turns\n\n    setCards(shuffledCards);\n    setNumTurns(0);\n    setChoiceOne(null);\n    setChoiceTwo(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Card Matching\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        onClick: console.log(\"kaka pepe\"),\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === choiceOne || card === choiceTwo || card.matched,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Turns: \", numTurns]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1GSrqAe6XqS4rEX43ofaq1UiVDk=\", false, function () {\n  return [useSound];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","cardImages","useSound","buttonClickSound","Card","App","cards","setCards","numTurns","setNumTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","playBtnClickedSound","shuffleCards","compareCards","handleChoice","card","src","prevCards","map","matched","resetTurn","setTimeout","shuffledCards","sort","Math","random","id","console","log"],"sources":["/Users/SuperGaming/Downloads/react-sept/matching-cards/src/App.jsx"],"sourcesContent":["// other\nimport { useState, useEffect } from 'react';\nimport { cardImages } from './external/CardImages';\nimport useSound from 'use-sound';\n\n// sounds\nimport buttonClickSound from './resources/buttonClick.mp3';\n\n// components\nimport Card from './components/Card';\n\n// styles \nimport './App.css';\n\n\nfunction App() {\n  const [cards, setCards] = useState([]); \n  const [numTurns, setNumTurns] = useState(0); // display number of turns\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false); // prevent user from clicking too many cards\n\n  const [playBtnClickedSound] = useSound(buttonClickSound);\n\n  useEffect(() => {\n    shuffleCards(); // on page load\n  }, [])\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      compareCards();\n    }\n  }, [choiceOne, choiceTwo]);\n\n\n  const handleChoice = (card) => {\n    if (choiceOne === null) {\n      setChoiceOne(card);\n    }\n\n    else {\n      setChoiceTwo(card);\n    }\n  } \n\n\n  const compareCards = () => {\n    setDisabled(true); // disable any other cards from being clicked\n\n    // same card\n    if (choiceOne.src === choiceTwo.src) {\n      setCards((prevCards) => {\n        return prevCards.map((card) => {\n          // update property of newly matched card\n          if (card.src === choiceOne.src) {\n            return {...card, matched: true}; \n          }\n          \n          else {\n            return card;\n          }\n\n        })\n      })\n\n      resetTurn();\n    }\n\n    // cards aren't the same\n    else {\n      setTimeout(() => resetTurn(), 1000);\n    }\n  }\n\n  \n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setNumTurns(numTurns + 1);\n    setDisabled(false);\n  }\n\n \n  const shuffleCards = () => {\n    playBtnClickedSound();\n\n    const shuffledCards = [...cardImages, ...cardImages] // two copies of each card\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random()}))\n\n      // reset cards and turns\n      setCards(shuffledCards);\n      setNumTurns(0);\n\n      setChoiceOne(null);\n      setChoiceTwo(null);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Card Matching</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <Card key={card.id} \n            onClick={console.log(\"kaka pepe\")}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}/>\n        ))}\n      </div>\n\n      <p>Turns: {numTurns}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}